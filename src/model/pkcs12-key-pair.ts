// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class PKCS12KeyPair {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):PKCS12KeyPair {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsPKCS12KeyPair(bb:flatbuffers.ByteBuffer, obj?:PKCS12KeyPair):PKCS12KeyPair {
  return (obj || new PKCS12KeyPair()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsPKCS12KeyPair(bb:flatbuffers.ByteBuffer, obj?:PKCS12KeyPair):PKCS12KeyPair {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new PKCS12KeyPair()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

privateKey():string|null
privateKey(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
privateKey(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

publicKey():string|null
publicKey(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
publicKey(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

certificate():string|null
certificate(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
certificate(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startPKCS12KeyPair(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addPrivateKey(builder:flatbuffers.Builder, privateKeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, privateKeyOffset, 0);
}

static addPublicKey(builder:flatbuffers.Builder, publicKeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, publicKeyOffset, 0);
}

static addCertificate(builder:flatbuffers.Builder, certificateOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, certificateOffset, 0);
}

static endPKCS12KeyPair(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createPKCS12KeyPair(builder:flatbuffers.Builder, privateKeyOffset:flatbuffers.Offset, publicKeyOffset:flatbuffers.Offset, certificateOffset:flatbuffers.Offset):flatbuffers.Offset {
  PKCS12KeyPair.startPKCS12KeyPair(builder);
  PKCS12KeyPair.addPrivateKey(builder, privateKeyOffset);
  PKCS12KeyPair.addPublicKey(builder, publicKeyOffset);
  PKCS12KeyPair.addCertificate(builder, certificateOffset);
  return PKCS12KeyPair.endPKCS12KeyPair(builder);
}
}
