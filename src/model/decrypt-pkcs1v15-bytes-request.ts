// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class DecryptPKCS1v15BytesRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):DecryptPKCS1v15BytesRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsDecryptPKCS1v15BytesRequest(bb:flatbuffers.ByteBuffer, obj?:DecryptPKCS1v15BytesRequest):DecryptPKCS1v15BytesRequest {
  return (obj || new DecryptPKCS1v15BytesRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsDecryptPKCS1v15BytesRequest(bb:flatbuffers.ByteBuffer, obj?:DecryptPKCS1v15BytesRequest):DecryptPKCS1v15BytesRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new DecryptPKCS1v15BytesRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

ciphertext(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readUint8(this.bb!.__vector(this.bb_pos + offset) + index) : 0;
}

ciphertextLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

ciphertextArray():Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? new Uint8Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

privateKey():string|null
privateKey(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
privateKey(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startDecryptPKCS1v15BytesRequest(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addCiphertext(builder:flatbuffers.Builder, ciphertextOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, ciphertextOffset, 0);
}

static createCiphertextVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset {
  builder.startVector(1, data.length, 1);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]!);
  }
  return builder.endVector();
}

static startCiphertextVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(1, numElems, 1);
}

static addPrivateKey(builder:flatbuffers.Builder, privateKeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, privateKeyOffset, 0);
}

static endDecryptPKCS1v15BytesRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createDecryptPKCS1v15BytesRequest(builder:flatbuffers.Builder, ciphertextOffset:flatbuffers.Offset, privateKeyOffset:flatbuffers.Offset):flatbuffers.Offset {
  DecryptPKCS1v15BytesRequest.startDecryptPKCS1v15BytesRequest(builder);
  DecryptPKCS1v15BytesRequest.addCiphertext(builder, ciphertextOffset);
  DecryptPKCS1v15BytesRequest.addPrivateKey(builder, privateKeyOffset);
  return DecryptPKCS1v15BytesRequest.endDecryptPKCS1v15BytesRequest(builder);
}
}
