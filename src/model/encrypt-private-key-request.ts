// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { PEMCipher } from '../model/pemcipher';


export class EncryptPrivateKeyRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):EncryptPrivateKeyRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsEncryptPrivateKeyRequest(bb:flatbuffers.ByteBuffer, obj?:EncryptPrivateKeyRequest):EncryptPrivateKeyRequest {
  return (obj || new EncryptPrivateKeyRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsEncryptPrivateKeyRequest(bb:flatbuffers.ByteBuffer, obj?:EncryptPrivateKeyRequest):EncryptPrivateKeyRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new EncryptPrivateKeyRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

privateKey():string|null
privateKey(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
privateKey(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

password():string|null
password(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
password(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

cipher():PEMCipher {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : PEMCipher.DES;
}

mutate_cipher(value:PEMCipher):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt32(this.bb_pos + offset, value);
  return true;
}

static startEncryptPrivateKeyRequest(builder:flatbuffers.Builder) {
  builder.startObject(3);
}

static addPrivateKey(builder:flatbuffers.Builder, privateKeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, privateKeyOffset, 0);
}

static addPassword(builder:flatbuffers.Builder, passwordOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, passwordOffset, 0);
}

static addCipher(builder:flatbuffers.Builder, cipher:PEMCipher) {
  builder.addFieldInt32(2, cipher, PEMCipher.DES);
}

static endEncryptPrivateKeyRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createEncryptPrivateKeyRequest(builder:flatbuffers.Builder, privateKeyOffset:flatbuffers.Offset, passwordOffset:flatbuffers.Offset, cipher:PEMCipher):flatbuffers.Offset {
  EncryptPrivateKeyRequest.startEncryptPrivateKeyRequest(builder);
  EncryptPrivateKeyRequest.addPrivateKey(builder, privateKeyOffset);
  EncryptPrivateKeyRequest.addPassword(builder, passwordOffset);
  EncryptPrivateKeyRequest.addCipher(builder, cipher);
  return EncryptPrivateKeyRequest.endEncryptPrivateKeyRequest(builder);
}
}
