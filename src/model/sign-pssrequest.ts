// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { Hash } from '../model/hash';
import { SaltLength } from '../model/salt-length';


export class SignPSSRequest {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):SignPSSRequest {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsSignPSSRequest(bb:flatbuffers.ByteBuffer, obj?:SignPSSRequest):SignPSSRequest {
  return (obj || new SignPSSRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsSignPSSRequest(bb:flatbuffers.ByteBuffer, obj?:SignPSSRequest):SignPSSRequest {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new SignPSSRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

message():string|null
message(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
message(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

hash():Hash {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : Hash.MD5;
}

mutate_hash(value:Hash):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 6);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt32(this.bb_pos + offset, value);
  return true;
}

saltLength():SaltLength {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : SaltLength.AUTO;
}

mutate_salt_length(value:SaltLength):boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);

  if (offset === 0) {
    return false;
  }

  this.bb!.writeInt32(this.bb_pos + offset, value);
  return true;
}

privateKey():string|null
privateKey(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
privateKey(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startSignPSSRequest(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addMessage(builder:flatbuffers.Builder, messageOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, messageOffset, 0);
}

static addHash(builder:flatbuffers.Builder, hash:Hash) {
  builder.addFieldInt32(1, hash, Hash.MD5);
}

static addSaltLength(builder:flatbuffers.Builder, saltLength:SaltLength) {
  builder.addFieldInt32(2, saltLength, SaltLength.AUTO);
}

static addPrivateKey(builder:flatbuffers.Builder, privateKeyOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, privateKeyOffset, 0);
}

static endSignPSSRequest(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createSignPSSRequest(builder:flatbuffers.Builder, messageOffset:flatbuffers.Offset, hash:Hash, saltLength:SaltLength, privateKeyOffset:flatbuffers.Offset):flatbuffers.Offset {
  SignPSSRequest.startSignPSSRequest(builder);
  SignPSSRequest.addMessage(builder, messageOffset);
  SignPSSRequest.addHash(builder, hash);
  SignPSSRequest.addSaltLength(builder, saltLength);
  SignPSSRequest.addPrivateKey(builder, privateKeyOffset);
  return SignPSSRequest.endSignPSSRequest(builder);
}
}
