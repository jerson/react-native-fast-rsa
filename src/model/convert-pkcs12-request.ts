// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class ConvertPKCS12Request {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ConvertPKCS12Request {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsConvertPKCS12Request(bb:flatbuffers.ByteBuffer, obj?:ConvertPKCS12Request):ConvertPKCS12Request {
  return (obj || new ConvertPKCS12Request()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsConvertPKCS12Request(bb:flatbuffers.ByteBuffer, obj?:ConvertPKCS12Request):ConvertPKCS12Request {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ConvertPKCS12Request()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

pkcs12():string|null
pkcs12(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
pkcs12(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

password():string|null
password(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
password(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startConvertPKCS12Request(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addPkcs12(builder:flatbuffers.Builder, pkcs12Offset:flatbuffers.Offset) {
  builder.addFieldOffset(0, pkcs12Offset, 0);
}

static addPassword(builder:flatbuffers.Builder, passwordOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, passwordOffset, 0);
}

static endConvertPKCS12Request(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createConvertPKCS12Request(builder:flatbuffers.Builder, pkcs12Offset:flatbuffers.Offset, passwordOffset:flatbuffers.Offset):flatbuffers.Offset {
  ConvertPKCS12Request.startConvertPKCS12Request(builder);
  ConvertPKCS12Request.addPkcs12(builder, pkcs12Offset);
  ConvertPKCS12Request.addPassword(builder, passwordOffset);
  return ConvertPKCS12Request.endConvertPKCS12Request(builder);
}
}
